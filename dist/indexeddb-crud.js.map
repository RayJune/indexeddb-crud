{"version":3,"sources":["../src/indexeddb-crud.js"],"names":["IndexedDBHandler","_db","_defaultStoreName","_presentKey","open","config","Promise","resolve","reject","window","indexedDB","_openHandler","fail","error","successCallback","openRequest","name","version","onblocked","alert","onupgradeneeded","target","result","success","_createObjectStoreHandler","storeConfig","onsuccess","onversionchange","close","_openSuccessCallbackHandler","onerror","console","log","Error","configStoreConfig","objectStoreList","_parseJSONData","forEach","index","storeName","length","_getPresentKey","transaction","cursor","value","id","continue","oncomplete","objectStoreNames","contains","_createObjectStore","store","createObjectStore","keyPath","key","autoIncrement","initialData","_initialDataHandler","objectStore","data","addRequest","add","rawdata","parsedData","JSON","parse","stringify","getLength","getNewKey","getItem","get","getWhetherConditionItem","newData","getWhetherCondition","condition","whether","getAll","addItem","removeItem","remove","removeWhetherConditionItem","removeWhetherCondition","clear","updateItem","update"],"mappings":"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","file":"indexeddb-crud.js","sourcesContent":["import log from './utlis/log';\nimport crud from './utlis/crud';\nimport getAllRequest from './utlis/getAllRequest';\n\nconst IndexedDBHandler = (() => {\n  let _db;\n  let _defaultStoreName;\n  const _presentKey = {}; // store multi-objectStore's presentKey\n\n  function open(config) {\n    return new Promise((resolve, reject) => {\n\n      if (window.indexedDB){\n        _openHandler(config, resolve);\n      } else {\n        log.fail('Your browser doesn\\'t support a stable version of IndexedDB. You can install latest Chrome or FireFox to handler it')\n        reject(error);\n      }\n    });\n  }\n\n  function _openHandler(config, successCallback) {\n    const openRequest = window.indexedDB.open(config.name, config.version); // open indexedDB\n\n    // an onblocked event is fired until they are closed or reloaded\n    openRequest.onblocked = () => {\n      // If some other tab is loaded with the database, then it needs to be closed before we can proceed.\n      window.alert('Please close all other tabs with this site open');\n    };\n\n    // Creating or updating the version of the database\n    openRequest.onupgradeneeded = ({ target }) => {\n      // All other databases have been closed. Set everything up.\n      _db = target.result;\n      log.success('onupgradeneeded in');\n      _createObjectStoreHandler(config.storeConfig);\n    };\n\n    openRequest.onsuccess = ({ target }) => {\n      _db = target.result;\n      _db.onversionchange = () => {\n        _db.close();\n        window.alert('A new version of this page is ready. Please reload');\n      };\n      _openSuccessCallbackHandler(config.storeConfig, successCallback);\n    };\n\n    // use error events bubble to handle all error events\n    openRequest.onerror = ({ target }) => {\n      window.alert('Something is wrong with indexedDB, for more information, checkout console');\n      console.log(target.error);\n      throw new Error(target.error);\n    };\n  }\n\n  function _openSuccessCallbackHandler(configStoreConfig, successCallback) {\n    const objectStoreList = _parseJSONData(configStoreConfig, 'storeName');\n\n    objectStoreList.forEach((storeConfig, index) => {\n      if (index === 0) {\n        _defaultStoreName = storeConfig.storeName; // PUNCHLINE: the last storeName is defaultStoreName\n      }\n      if (index === (objectStoreList.length - 1)) {\n        _getPresentKey(storeConfig.storeName, () => {\n          successCallback();\n          log.success('open indexedDB success');\n        });\n      } else {\n        _getPresentKey(storeConfig.storeName);\n      }\n    });\n  }\n\n  // set present key value to _presentKey (the private property)\n  function _getPresentKey(storeName, successCallback) {\n    const transaction = _db.transaction([storeName]);\n\n    _presentKey[storeName] = 0;\n    getAllRequest(transaction, storeName).onsuccess = ({ target }) => {\n      const cursor = target.result;\n\n      if (cursor) {\n        _presentKey[storeName] = cursor.value.id;\n        cursor.continue();\n      }\n    };\n    transaction.oncomplete = () => {\n      log.success(`now ${storeName} 's max key is ${_presentKey[storeName]}`); // initial value is 0\n      if (successCallback) {\n        successCallback();\n        log.success('openSuccessCallback finished');\n      }\n    };\n  }\n\n  function _createObjectStoreHandler(configStoreConfig) {\n    _parseJSONData(configStoreConfig, 'storeName').forEach((storeConfig) => {\n      if (!(_db.objectStoreNames.contains(storeConfig.storeName))) {\n        _createObjectStore(storeConfig);\n      }\n    });\n  }\n\n  function _createObjectStore(storeConfig) {\n    const store = _db.createObjectStore(storeConfig.storeName, { keyPath: storeConfig.key, autoIncrement: true });\n\n    // Use transaction oncomplete to make sure the object Store creation is finished\n    store.transaction.oncomplete = () => {\n      log.success(`create ${storeConfig.storeName} 's object store succeed`);\n      if (storeConfig.initialData) {\n        // Store initial values in the newly created object store.\n        _initialDataHandler(storeConfig.storeName, storeConfig.initialData);\n      }\n    };\n  }\n\n  function _initialDataHandler(storeName, initialData) {\n    const transaction = _db.transaction([storeName], 'readwrite');\n    const objectStore = transaction.objectStore(storeName);\n\n    _parseJSONData(initialData, 'initial').forEach((data, index) => {\n      const addRequest = objectStore.add(data);\n\n      addRequest.onsuccess = () => {\n        log.success(`add initial data[${index}] successed`);\n      };\n    });\n    transaction.oncomplete = () => {\n      log.success(`add all ${storeName} 's initial data done`);\n      _getPresentKey(storeName);\n    };\n  }\n\n  function _parseJSONData(rawdata, name) {\n    try {\n      const parsedData = JSON.parse(JSON.stringify(rawdata));\n\n      return parsedData;\n    } catch (error) {\n      window.alert(`please set correct ${name} array object`);\n      console.log(error);\n      throw error;\n    }\n  }\n\n  function getLength(storeName = _defaultStoreName) {\n    return _presentKey[storeName];\n  }\n\n  function getNewKey(storeName = _defaultStoreName) {\n    _presentKey[storeName] += 1;\n\n    return _presentKey[storeName];\n  }\n\n  /* crud methods */\n\n  const getItem = (key, storeName = _defaultStoreName) =>\n    crud.get(_db, key, storeName);\n\n  const getWhetherConditionItem = (newData, storeName = _defaultStoreName) =>\n    crud.getWhetherCondition(_db, condition, whether, storeName);\n\n  const getAll = (storeName = _defaultStoreName) =>\n    crud.getAll(_db, successCallback, storeName);\n\n  const addItem = (newData, storeName = _defaultStoreName) =>\n    crud.add(_db, newData, storeName);\n\n  const removeItem = (key, storeName = _defaultStoreName) =>\n    crud.remove(_db, key, storeName);\n\n  const removeWhetherConditionItem = (condition, whether, storeName = _defaultStoreName) =>\n    crud.removeWhetherCondition(_db, condition, whether, storeName);\n\n  const clear = (storeName = _defaultStoreName) =>\n    crud.clear(_db, storeName);\n\n  const updateItem = (newData, storeName = _defaultStoreName) =>\n    crud.update(_db, newData, storeName);\n\n  return {\n    open,\n    getLength,\n    getNewKey,\n    getItem,\n    getWhetherConditionItem,\n    getAll,\n    addItem,\n    removeItem,\n    removeWhetherConditionItem,\n    clear,\n    updateItem,\n  };\n})();\n\nexport default IndexedDBHandler;\n"]}