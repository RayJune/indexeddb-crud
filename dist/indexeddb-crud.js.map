{"version":3,"sources":["../src/indexeddb-crud.js"],"names":["IndexedDBHandler","_db","_defaultStoreName","_presentKey","open","config","openSuccessCallback","openFailCallback","window","indexedDB","alert","_openHandler","successCallback","openRequest","name","version","onblocked","onupgradeneeded","target","result","console","log","_createObjectStoreHandler","storeConfig","onsuccess","onversionchange","close","_openSuccessCallbackHandler","onerror","error","Error","configStoreConfig","objectStoreList","_parseJSONData","forEach","index","storeName","length","_getPresentKey","transaction","_getAllRequest","cursor","value","id","continue","oncomplete","objectStoreNames","contains","_createObjectStore","store","createObjectStore","keyPath","key","autoIncrement","initialData","_initialDataHandler","objectStore","data","addRequest","add","rawdata","parsedData","JSON","parse","stringify","getLength","getNewKey","addItem","newData","source","getItem","getRequest","get","parseInt","getWhetherConditionItem","condition","whether","push","getAll","removeItem","deleteRequest","delete","removeWhetherConditionItem","clear","updateItem","putRequest","put","openCursor","IDBKeyRange","lowerBound"],"mappings":"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","file":"indexeddb-crud.js","sourcesContent":["const IndexedDBHandler = (() => {\n  let _db;\n  let _defaultStoreName;\n  const _presentKey = {}; // store multi-objectStore's presentKey\n\n  function open(config, openSuccessCallback, openFailCallback) {\n    // init open indexedDB\n    if (!window.indexedDB) { // firstly inspect browser's support for indexedDB\n      if (openFailCallback) {\n        openFailCallback(); // PUNCHLINE: offer without-DB handler\n      } else {\n        window.alert('\\u2714 Your browser doesn\\'t support a stable version of IndexedDB. You can install latest Chrome or FireFox to handler it');\n      }\n\n      return 0;\n    }\n    _openHandler(config, openSuccessCallback);\n\n    return 0;\n  }\n\n  function _openHandler(config, successCallback) {\n    const openRequest = window.indexedDB.open(config.name, config.version); // open indexedDB\n\n    // an onblocked event is fired until they are closed or reloaded\n    openRequest.onblocked = () => {\n      // If some other tab is loaded with the database, then it needs to be closed before we can proceed.\n      window.alert('Please close all other tabs with this site open');\n    };\n\n    // Creating or updating the version of the database\n    openRequest.onupgradeneeded = ({ target }) => {\n      // All other databases have been closed. Set everything up.\n      _db = target.result;\n      console.log('\\u2713 onupgradeneeded in');\n      _createObjectStoreHandler(config.storeConfig);\n    };\n\n    openRequest.onsuccess = ({ target }) => {\n      _db = target.result;\n      _db.onversionchange = () => {\n        _db.close();\n        window.alert('A new version of this page is ready. Please reload');\n      };\n      _openSuccessCallbackHandler(config.storeConfig, successCallback);\n    };\n\n    // use error events bubble to handle all error events\n    openRequest.onerror = ({ target }) => {\n      window.alert('Something is wrong with indexedDB, for more information, checkout console');\n      console.log(target.error);\n      throw new Error(target.error);\n    };\n  }\n\n  function _openSuccessCallbackHandler(configStoreConfig, successCallback) {\n    const objectStoreList = _parseJSONData(configStoreConfig, 'storeName');\n\n    objectStoreList.forEach((storeConfig, index) => {\n      if (index === 0) {\n        _defaultStoreName = storeConfig.storeName; // PUNCHLINE: the last storeName is defaultStoreName\n      }\n      if (index === (objectStoreList.length - 1)) {\n        _getPresentKey(storeConfig.storeName, () => {\n          successCallback();\n          console.log('\\u2713 open indexedDB success');\n        });\n      } else {\n        _getPresentKey(storeConfig.storeName);\n      }\n    });\n  }\n\n  // set present key value to _presentKey (the private property)\n  function _getPresentKey(storeName, successCallback) {\n    const transaction = _db.transaction([storeName]);\n\n    _presentKey[storeName] = 0;\n    _getAllRequest(transaction, storeName).onsuccess = ({ target }) => {\n      const cursor = target.result;\n\n      if (cursor) {\n        _presentKey[storeName] = cursor.value.id;\n        cursor.continue();\n      }\n    };\n    transaction.oncomplete = () => {\n      console.log(`\\u2713 now ${storeName} 's max key is ${_presentKey[storeName]}`); // initial value is 0\n      if (successCallback) {\n        successCallback();\n        console.log('\\u2713 openSuccessCallback finished');\n      }\n    };\n  }\n\n  function _createObjectStoreHandler(configStoreConfig) {\n    _parseJSONData(configStoreConfig, 'storeName').forEach((storeConfig) => {\n      if (!(_db.objectStoreNames.contains(storeConfig.storeName))) {\n        _createObjectStore(storeConfig);\n      }\n    });\n  }\n\n  function _createObjectStore(storeConfig) {\n    const store = _db.createObjectStore(storeConfig.storeName, { keyPath: storeConfig.key, autoIncrement: true });\n\n    // Use transaction oncomplete to make sure the object Store creation is finished\n    store.transaction.oncomplete = () => {\n      console.log(`\\u2713 create ${storeConfig.storeName} 's object store succeed`);\n      if (storeConfig.initialData) {\n        // Store initial values in the newly created object store.\n        _initialDataHandler(storeConfig.storeName, storeConfig.initialData);\n      }\n    };\n  }\n\n  function _initialDataHandler(storeName, initialData) {\n    const transaction = _db.transaction([storeName], 'readwrite');\n    const objectStore = transaction.objectStore(storeName);\n\n    _parseJSONData(initialData, 'initial').forEach((data, index) => {\n      const addRequest = objectStore.add(data);\n\n      addRequest.onsuccess = () => {\n        console.log(`\\u2713 add initial data[${index}] successed`);\n      };\n    });\n    transaction.oncomplete = () => {\n      console.log(`\\u2713 add all ${storeName} 's initial data done :)`);\n      _getPresentKey(storeName);\n    };\n  }\n\n  function _parseJSONData(rawdata, name) {\n    try {\n      const parsedData = JSON.parse(JSON.stringify(rawdata));\n\n      return parsedData;\n    } catch (error) {\n      window.alert(`please set correct ${name} array object :)`);\n      console.log(error);\n      throw error;\n    }\n  }\n\n  function getLength(storeName = _defaultStoreName) {\n    return _presentKey[storeName];\n  }\n\n  function getNewKey(storeName = _defaultStoreName) {\n    _presentKey[storeName] += 1;\n\n    return _presentKey[storeName];\n  }\n\n  /* CRUD */\n\n  function addItem(newData, successCallback, storeName = _defaultStoreName) {\n    const transaction = _db.transaction([storeName], 'readwrite');\n    const addRequest = transaction.objectStore(storeName).add(newData);\n\n    addRequest.onsuccess = () => {\n      console.log(`\\u2713 add ${storeName}'s ${addRequest.source.keyPath}  = ${newData[addRequest.source.keyPath]} data succeed :)`);\n      if (successCallback) {\n        successCallback(newData);\n      }\n    };\n  }\n\n  function getItem(key, successCallback, storeName = _defaultStoreName) {\n    const transaction = _db.transaction([storeName]);\n    const getRequest = transaction.objectStore(storeName).get(parseInt(key, 10)); // get it by index\n\n    getRequest.onsuccess = () => {\n      console.log(`\\u2713 get ${storeName}'s ${getRequest.source.keyPath} = ${key} data success :)`);\n      if (successCallback) {\n        successCallback(getRequest.result);\n      }\n    };\n  }\n\n  // get conditional data (boolean condition)\n  function getWhetherConditionItem(condition, whether, successCallback, storeName = _defaultStoreName) {\n    const transaction = _db.transaction([storeName]);\n    const result = []; // use an array to storage eligible data\n\n    _getAllRequest(transaction, storeName).onsuccess = ({ target }) => {\n      const cursor = target.result;\n\n      if (cursor) {\n        if (cursor.value[condition] === whether) {\n          result.push(cursor.value);\n        }\n        cursor.continue();\n      }\n    };\n    transaction.oncomplete = () => {\n      console.log(`\\u2713 get ${storeName}'s ${condition} = ${whether} data success :)`);\n      if (successCallback) {\n        successCallback(result);\n      }\n    };\n  }\n\n  function getAll(successCallback, storeName = _defaultStoreName) {\n    const transaction = _db.transaction([storeName]);\n    const result = [];\n\n    _getAllRequest(transaction, storeName).onsuccess = ({ target }) => {\n      const cursor = target.result;\n\n      if (cursor) {\n        result.push(cursor.value);\n        cursor.continue();\n      }\n    };\n    transaction.oncomplete = () => {\n      console.log(`\\u2713 get ${storeName}'s all data success :)`);\n      if (successCallback) {\n        successCallback(result);\n      }\n    };\n  }\n\n  function removeItem(key, successCallback, storeName = _defaultStoreName) {\n    const transaction = _db.transaction([storeName], 'readwrite');\n    const deleteRequest = transaction.objectStore(storeName).delete(key);\n\n    deleteRequest.onsuccess = () => {\n      console.log(`\\u2713 remove ${storeName}'s  ${deleteRequest.source.keyPath} = ${key} data success :)`);\n      if (successCallback) {\n        successCallback(key);\n      }\n    };\n  }\n\n  function removeWhetherConditionItem(condition, whether, successCallback, storeName = _defaultStoreName) {\n    const transaction = _db.transaction([storeName], 'readwrite');\n\n    _getAllRequest(transaction, storeName).onsuccess = ({ target }) => {\n      const cursor = target.result;\n\n      if (cursor) {\n        if (cursor.value[condition] === whether) {\n          cursor.delete();\n        }\n        cursor.continue();\n      }\n    };\n    transaction.oncomplete = () => {\n      console.log(`\\u2713 remove ${storeName}'s ${condition} = ${whether} data success :)`);\n      if (successCallback) {\n        successCallback();\n      }\n    };\n  }\n\n  function clear(successCallback, storeName = _defaultStoreName) {\n    const transaction = _db.transaction([storeName], 'readwrite');\n\n    _getAllRequest(transaction, storeName).onsuccess = ({ target }) => {\n      const cursor = target.result;\n\n      if (cursor) {\n        cursor.delete();\n        cursor.continue();\n      }\n    };\n    transaction.oncomplete = () => {\n      console.log(`\\u2713 clear ${storeName}'s all data success :)`);\n      if (successCallback) {\n        successCallback('clear all data success');\n      }\n    };\n  }\n\n  // update one\n  function updateItem(newData, successCallback, storeName = _defaultStoreName) {\n    const transaction = _db.transaction([storeName], 'readwrite');\n    const putRequest = transaction.objectStore(storeName).put(newData);\n\n    putRequest.onsuccess = () => {\n      console.log(`\\u2713 update ${storeName}'s ${putRequest.source.keyPath}  = ${newData[putRequest.source.keyPath]} data success :)`);\n      if (successCallback) {\n        successCallback(newData);\n      }\n    };\n  }\n\n  function _getAllRequest(transaction, storeName) {\n    return transaction.objectStore(storeName).openCursor(IDBKeyRange.lowerBound(1), 'next');\n  }\n\n  return {\n    open,\n    getLength,\n    getNewKey,\n    getItem,\n    getWhetherConditionItem,\n    getAll,\n    addItem,\n    removeItem,\n    removeWhetherConditionItem,\n    clear,\n    updateItem,\n  };\n})();\n\nexport default IndexedDBHandler;\n"]}