{"version":3,"sources":["../src/indexeddb-crud.js"],"names":["_db","_defaultStoreName","_presentKey","open","Promise","resolve","reject","window","indexedDB","_openHandler","config","fail","getLength","storeName","getNewKey","getItem","key","get","getWhetherConditionItem","condition","whether","getWhetherCondition","getAll","addItem","newData","add","removeItem","remove","removeWhetherConditionItem","removeWhetherCondition","clear","updateItem","update","successCallback","openRequest","name","version","onblocked","onupgradeneeded","target","result","success","_createObjectStoreHandler","storeConfig","onsuccess","onversionchange","close","_openSuccessCallbackHandler","onerror","error","Error","configStoreConfig","objectStoreList","forEach","index","length","_getPresentKey","transaction","successMessage","cursor","value","id","continue","then","objectStoreNames","contains","_createObjectStore","initialData","store","createObjectStore","keyPath","autoIncrement","_initialDataHandler","objectStore","data","addRequest"],"mappings":"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","file":"indexeddb-crud.js","sourcesContent":["import log from './utlis/log';\nimport crud from './utlis/crud';\nimport getAllRequest from './utlis/getAllRequest';\nimport parseJSONData from './utlis/parseJSONData';\nimport promiseGenerator from './utlis/promiseGenerator';\n\nlet _db;\nlet _defaultStoreName;\nconst _presentKey = {}; // store multi-objectStore's presentKey\n\n/* first step, open it and use others API */\n\nconst open = config =>\n  new Promise((resolve, reject) => {\n    if (window.indexedDB) {\n      _openHandler(config, resolve);\n    } else {\n      log.fail('Your browser doesn\\'t support a stable version of IndexedDB. You can install latest Chrome or FireFox to handler it');\n      reject();\n    }\n  });\n\n/* synchronous API */\n\nconst getLength = (storeName = _defaultStoreName) => _presentKey[storeName];\n\nconst getNewKey = (storeName = _defaultStoreName) => {\n  _presentKey[storeName] += 1;\n\n  return _presentKey[storeName];\n};\n\n/* asynchronous API: crud methods */\n\nconst getItem = (key, storeName = _defaultStoreName) =>\n  crud.get(_db, key, storeName);\n\nconst getWhetherConditionItem = (condition, whether, storeName = _defaultStoreName) =>\n  crud.getWhetherCondition(_db, condition, whether, storeName);\n\nconst getAll = (storeName = _defaultStoreName) =>\n  crud.getAll(_db, storeName);\n\nconst addItem = (newData, storeName = _defaultStoreName) =>\n  crud.add(_db, newData, storeName);\n\nconst removeItem = (key, storeName = _defaultStoreName) =>\n  crud.remove(_db, key, storeName);\n\nconst removeWhetherConditionItem = (condition, whether, storeName = _defaultStoreName) =>\n  crud.removeWhetherCondition(_db, condition, whether, storeName);\n\nconst clear = (storeName = _defaultStoreName) =>\n  crud.clear(_db, storeName);\n\nconst updateItem = (newData, storeName = _defaultStoreName) =>\n  crud.update(_db, newData, storeName);\n\n/* handle DB.open */\n\nfunction _openHandler(config, successCallback) {\n  const openRequest = window.indexedDB.open(config.name, config.version); // open indexedDB\n\n  // an onblocked event is fired until they are closed or reloaded\n  openRequest.onblocked = () => {\n    // If some other tab is loaded with the database, then it needs to be closed before we can proceed.\n    log.fail('Please close all other tabs with this site open');\n  };\n\n  // Creating or updating the version of the database\n  openRequest.onupgradeneeded = ({ target }) => {\n    // All other databases have been closed. Set everything up.\n    _db = target.result;\n    log.success('onupgradeneeded in');\n    _createObjectStoreHandler(config.storeConfig);\n  };\n\n  openRequest.onsuccess = ({ target }) => {\n    _db = target.result;\n    _db.onversionchange = () => {\n      _db.close();\n      log.fail('A new version of this page is ready. Please reload');\n    };\n    _openSuccessCallbackHandler(config.storeConfig, successCallback);\n  };\n\n  // use error events bubble to handle all error events\n  openRequest.onerror = ({ target }) => {\n    log.fail('Something is wrong with indexedDB, for more information, checkout console');\n    log.fail(target.error);\n    throw new Error(target.error);\n  };\n}\n\nfunction _openSuccessCallbackHandler(configStoreConfig, successCallback) {\n  const objectStoreList = parseJSONData(configStoreConfig, 'storeName');\n\n  objectStoreList.forEach((storeConfig, index) => {\n    if (index === 0) {\n      _defaultStoreName = storeConfig.storeName; // PUNCHLINE: the last storeName is defaultStoreName\n    }\n    if (index === (objectStoreList.length - 1)) {\n      _getPresentKey(storeConfig.storeName, () => {\n        successCallback();\n        log.success('open indexedDB success');\n      });\n    } else {\n      _getPresentKey(storeConfig.storeName);\n    }\n  });\n}\n\n// set present key value to _presentKey (the private property)\nfunction _getPresentKey(storeName, successCallback) {\n  const transaction = _db.transaction([storeName]);\n  const successMessage = `now ${storeName} 's max key is ${_presentKey[storeName]}`; // initial value is 0\n\n  _presentKey[storeName] = 0;\n  getAllRequest(transaction, storeName).onsuccess = ({ target }) => {\n    const cursor = target.result;\n\n    if (cursor) {\n      _presentKey[storeName] = cursor.value.id;\n      cursor.continue();\n    }\n  };\n  promiseGenerator.transaction(transaction, successMessage)\n    .then(successCallback);\n}\n\nfunction _createObjectStoreHandler(configStoreConfig) {\n  parseJSONData(configStoreConfig, 'storeName').forEach((storeConfig) => {\n    if (!(_db.objectStoreNames.contains(storeConfig.storeName))) {\n      _createObjectStore(storeConfig);\n    }\n  });\n}\n\nfunction _createObjectStore({ storeName, key, initialData }) {\n  const store = _db.createObjectStore(storeName, { keyPath: key, autoIncrement: true });\n  const { transaction } = store;\n  const successMessage = `create ${storeName} 's object store succeed`;\n\n  promiseGenerator.transaction(transaction, successMessage)\n    .then(() => {\n      if (initialData) {\n        // Store initial values in the newly created object store.\n        _initialDataHandler(storeName, initialData);\n      }\n    });\n}\n\nfunction _initialDataHandler(storeName, initialData) {\n  const transaction = _db.transaction([storeName], 'readwrite');\n  const objectStore = transaction.objectStore(storeName);\n  const successMessage = `add all ${storeName} 's initial data done`;\n\n  parseJSONData(initialData, 'initial').forEach((data, index) => {\n    const addRequest = objectStore.add(data);\n\n    addRequest.onsuccess = () => {\n      log.success(`add initial data[${index}] successed`);\n    };\n  });\n  promiseGenerator.transaction(transaction, successMessage)\n    .then(() => { _getPresentKey(storeName); });\n}\n\nexport default {\n  open,\n  getLength,\n  getNewKey,\n  getItem,\n  getWhetherConditionItem,\n  getAll,\n  addItem,\n  removeItem,\n  removeWhetherConditionItem,\n  clear,\n  updateItem,\n};\n"]}