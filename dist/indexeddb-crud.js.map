{"version":3,"sources":["../src/indexeddb-crud.js"],"names":["_db","_defaultStoreName","_presentKey","open","config","Promise","resolve","reject","window","indexedDB","_openHandler","fail","error","successCallback","openRequest","name","version","onblocked","alert","onupgradeneeded","target","result","success","_createObjectStoreHandler","storeConfig","onsuccess","onversionchange","close","_openSuccessCallbackHandler","onerror","console","log","Error","configStoreConfig","objectStoreList","forEach","index","storeName","length","_getPresentKey","transaction","cursor","value","id","continue","oncomplete","objectStoreNames","contains","_createObjectStore","store","createObjectStore","keyPath","key","autoIncrement","initialData","_initialDataHandler","objectStore","data","addRequest","add","getLength","getNewKey","getItem","get","getWhetherConditionItem","condition","whether","getWhetherCondition","getAll","addItem","newData","removeItem","remove","removeWhetherConditionItem","removeWhetherCondition","clear","updateItem","update"],"mappings":"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","file":"indexeddb-crud.js","sourcesContent":["import log from './utlis/log';\nimport crud from './utlis/crud';\nimport getAllRequest from './utlis/getAllRequest';\nimport parseJSONData from './utlis/parseJSONData';\n\nlet _db;\nlet _defaultStoreName;\nconst _presentKey = {}; // store multi-objectStore's presentKey\n\nfunction open(config) {\n  return new Promise((resolve, reject) => {\n\n    if (window.indexedDB){\n      _openHandler(config, resolve);\n    } else {\n      log.fail('Your browser doesn\\'t support a stable version of IndexedDB. You can install latest Chrome or FireFox to handler it')\n      reject(error);\n    }\n  });\n}\n\nfunction _openHandler(config, successCallback) {\n  const openRequest = window.indexedDB.open(config.name, config.version); // open indexedDB\n\n  // an onblocked event is fired until they are closed or reloaded\n  openRequest.onblocked = () => {\n    // If some other tab is loaded with the database, then it needs to be closed before we can proceed.\n    window.alert('Please close all other tabs with this site open');\n  };\n\n  // Creating or updating the version of the database\n  openRequest.onupgradeneeded = ({ target }) => {\n    // All other databases have been closed. Set everything up.\n    _db = target.result;\n    log.success('onupgradeneeded in');\n    _createObjectStoreHandler(config.storeConfig);\n  };\n\n  openRequest.onsuccess = ({ target }) => {\n    _db = target.result;\n    _db.onversionchange = () => {\n      _db.close();\n      window.alert('A new version of this page is ready. Please reload');\n    };\n    _openSuccessCallbackHandler(config.storeConfig, successCallback);\n  };\n\n  // use error events bubble to handle all error events\n  openRequest.onerror = ({ target }) => {\n    window.alert('Something is wrong with indexedDB, for more information, checkout console');\n    console.log(target.error);\n    throw new Error(target.error);\n  };\n}\n\nfunction _openSuccessCallbackHandler(configStoreConfig, successCallback) {\n  const objectStoreList = parseJSONData(configStoreConfig, 'storeName');\n\n  objectStoreList.forEach((storeConfig, index) => {\n    if (index === 0) {\n      _defaultStoreName = storeConfig.storeName; // PUNCHLINE: the last storeName is defaultStoreName\n    }\n    if (index === (objectStoreList.length - 1)) {\n      _getPresentKey(storeConfig.storeName, () => {\n        successCallback();\n        log.success('open indexedDB success');\n      });\n    } else {\n      _getPresentKey(storeConfig.storeName);\n    }\n  });\n}\n\n// set present key value to _presentKey (the private property)\nfunction _getPresentKey(storeName, successCallback) {\n  const transaction = _db.transaction([storeName]);\n\n  _presentKey[storeName] = 0;\n  getAllRequest(transaction, storeName).onsuccess = ({ target }) => {\n    const cursor = target.result;\n\n    if (cursor) {\n      _presentKey[storeName] = cursor.value.id;\n      cursor.continue();\n    }\n  };\n  transaction.oncomplete = () => {\n    log.success(`now ${storeName} 's max key is ${_presentKey[storeName]}`); // initial value is 0\n    if (successCallback) {\n      successCallback();\n      log.success('openSuccessCallback finished');\n    }\n  };\n}\n\nfunction _createObjectStoreHandler(configStoreConfig) {\n  parseJSONData(configStoreConfig, 'storeName').forEach((storeConfig) => {\n    if (!(_db.objectStoreNames.contains(storeConfig.storeName))) {\n      _createObjectStore(storeConfig);\n    }\n  });\n}\n\nfunction _createObjectStore(storeConfig) {\n  const store = _db.createObjectStore(storeConfig.storeName, { keyPath: storeConfig.key, autoIncrement: true });\n\n  // Use transaction oncomplete to make sure the object Store creation is finished\n  store.transaction.oncomplete = () => {\n    log.success(`create ${storeConfig.storeName} 's object store succeed`);\n    if (storeConfig.initialData) {\n      // Store initial values in the newly created object store.\n      _initialDataHandler(storeConfig.storeName, storeConfig.initialData);\n    }\n  };\n}\n\nfunction _initialDataHandler(storeName, initialData) {\n  const transaction = _db.transaction([storeName], 'readwrite');\n  const objectStore = transaction.objectStore(storeName);\n\n  parseJSONData(initialData, 'initial').forEach((data, index) => {\n    const addRequest = objectStore.add(data);\n\n    addRequest.onsuccess = () => {\n      log.success(`add initial data[${index}] successed`);\n    };\n  });\n  transaction.oncomplete = () => {\n    log.success(`add all ${storeName} 's initial data done`);\n    _getPresentKey(storeName);\n  };\n}\n\nfunction getLength(storeName = _defaultStoreName) {\n  return _presentKey[storeName];\n}\n\nfunction getNewKey(storeName = _defaultStoreName) {\n  _presentKey[storeName] += 1;\n\n  return _presentKey[storeName];\n}\n\n/* crud methods */\n\nconst getItem = (key, storeName = _defaultStoreName) =>\n  crud.get(_db, key, storeName);\n\nconst getWhetherConditionItem = (condition, whether, storeName = _defaultStoreName) =>\n  crud.getWhetherCondition(_db, condition, whether, storeName);\n\nconst getAll = (storeName = _defaultStoreName) =>\n  crud.getAll(_db, storeName);\n\nconst addItem = (newData, storeName = _defaultStoreName) =>\n  crud.add(_db, newData, storeName);\n\nconst removeItem = (key, storeName = _defaultStoreName) =>\n  crud.remove(_db, key, storeName);\n\nconst removeWhetherConditionItem = (condition, whether, storeName = _defaultStoreName) =>\n  crud.removeWhetherCondition(_db, condition, whether, storeName);\n\nconst clear = (storeName = _defaultStoreName) =>\n  crud.clear(_db, storeName);\n\nconst updateItem = (newData, storeName = _defaultStoreName) =>\n  crud.update(_db, newData, storeName);\n\nexport default {\n  open,\n  getLength,\n  getNewKey,\n  getItem,\n  getWhetherConditionItem,\n  getAll,\n  addItem,\n  removeItem,\n  removeWhetherConditionItem,\n  clear,\n  updateItem,\n};;\n"]}