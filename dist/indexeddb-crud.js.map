{"version":3,"sources":["../src/indexeddb-crud.js"],"names":["_db","_defaultStoreName","_presentKey","open","config","Promise","resolve","reject","window","indexedDB","_openHandler","fail","successCallback","openRequest","name","version","onblocked","onupgradeneeded","target","result","success","_createObjectStoreHandler","storeConfig","onsuccess","onversionchange","close","_openSuccessCallbackHandler","onerror","error","Error","configStoreConfig","objectStoreList","forEach","index","storeName","length","_getPresentKey","transaction","successMessage","cursor","value","id","continue","then","objectStoreNames","contains","_createObjectStore","key","initialData","store","createObjectStore","keyPath","autoIncrement","_initialDataHandler","objectStore","data","addRequest","add","getLength","getNewKey","getItem","get","getWhetherConditionItem","condition","whether","getWhetherCondition","getAll","addItem","newData","removeItem","remove","removeWhetherConditionItem","removeWhetherCondition","clear","updateItem","update"],"mappings":"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","file":"indexeddb-crud.js","sourcesContent":["import log from './utlis/log';\nimport crud from './utlis/crud';\nimport getAllRequest from './utlis/getAllRequest';\nimport parseJSONData from './utlis/parseJSONData';\nimport promiseGenerator from './utlis/promiseGenerator';\n\nlet _db;\nlet _defaultStoreName;\nconst _presentKey = {}; // store multi-objectStore's presentKey\n\nfunction open(config) {\n  return new Promise((resolve, reject) => {\n    if (window.indexedDB) {\n      _openHandler(config, resolve);\n    } else {\n      log.fail('Your browser doesn\\'t support a stable version of IndexedDB. You can install latest Chrome or FireFox to handler it');\n      reject();\n    }\n  });\n}\n\nfunction _openHandler(config, successCallback) {\n  const openRequest = window.indexedDB.open(config.name, config.version); // open indexedDB\n\n  // an onblocked event is fired until they are closed or reloaded\n  openRequest.onblocked = () => {\n    // If some other tab is loaded with the database, then it needs to be closed before we can proceed.\n    log.fail('Please close all other tabs with this site open');\n  };\n\n  // Creating or updating the version of the database\n  openRequest.onupgradeneeded = ({ target }) => {\n    // All other databases have been closed. Set everything up.\n    _db = target.result;\n    log.success('onupgradeneeded in');\n    _createObjectStoreHandler(config.storeConfig);\n  };\n\n  openRequest.onsuccess = ({ target }) => {\n    _db = target.result;\n    _db.onversionchange = () => {\n      _db.close();\n      log.fail('A new version of this page is ready. Please reload');\n    };\n    _openSuccessCallbackHandler(config.storeConfig, successCallback);\n  };\n\n  // use error events bubble to handle all error events\n  openRequest.onerror = ({ target }) => {\n    log.fail('Something is wrong with indexedDB, for more information, checkout console');\n    log.fail(target.error);\n    throw new Error(target.error);\n  };\n}\n\nfunction _openSuccessCallbackHandler(configStoreConfig, successCallback) {\n  const objectStoreList = parseJSONData(configStoreConfig, 'storeName');\n\n  objectStoreList.forEach((storeConfig, index) => {\n    if (index === 0) {\n      _defaultStoreName = storeConfig.storeName; // PUNCHLINE: the last storeName is defaultStoreName\n    }\n    if (index === (objectStoreList.length - 1)) {\n      _getPresentKey(storeConfig.storeName, () => {\n        successCallback();\n        log.success('open indexedDB success');\n      });\n    } else {\n      _getPresentKey(storeConfig.storeName);\n    }\n  });\n}\n\n// set present key value to _presentKey (the private property)\nfunction _getPresentKey(storeName, successCallback) {\n  const transaction = _db.transaction([storeName]);\n  const successMessage = `now ${storeName} 's max key is ${_presentKey[storeName]}`; // initial value is 0\n\n  _presentKey[storeName] = 0;\n  getAllRequest(transaction, storeName).onsuccess = ({ target }) => {\n    const cursor = target.result;\n\n    if (cursor) {\n      _presentKey[storeName] = cursor.value.id;\n      cursor.continue();\n    }\n  };\n  promiseGenerator.transaction(transaction, successMessage)\n    .then(successCallback);\n}\n\nfunction _createObjectStoreHandler(configStoreConfig) {\n  parseJSONData(configStoreConfig, 'storeName').forEach((storeConfig) => {\n    if (!(_db.objectStoreNames.contains(storeConfig.storeName))) {\n      _createObjectStore(storeConfig);\n    }\n  });\n}\n\nfunction _createObjectStore({ storeName, key, initialData }) {\n  const store = _db.createObjectStore(storeName, { keyPath: key, autoIncrement: true });\n  const { transaction } = store;\n  const successMessage = `create ${storeName} 's object store succeed`;\n\n  promiseGenerator.transaction(transaction, successMessage)\n    .then(() => {\n      if (initialData) {\n      // Store initial values in the newly created object store.\n        _initialDataHandler(storeName, initialData);\n      }\n    });\n}\n\nfunction _initialDataHandler(storeName, initialData) {\n  const transaction = _db.transaction([storeName], 'readwrite');\n  const objectStore = transaction.objectStore(storeName);\n  const successMessage = `add all ${storeName} 's initial data done`;\n\n  parseJSONData(initialData, 'initial').forEach((data, index) => {\n    const addRequest = objectStore.add(data);\n\n    addRequest.onsuccess = () => {\n      log.success(`add initial data[${index}] successed`);\n    };\n  });\n  promiseGenerator.transaction(transaction, successMessage)\n    .then(() => { _getPresentKey(storeName); });\n}\n\n/* synchronous API */\n\nfunction getLength(storeName = _defaultStoreName) {\n  return _presentKey[storeName];\n}\n\nfunction getNewKey(storeName = _defaultStoreName) {\n  _presentKey[storeName] += 1;\n\n  return _presentKey[storeName];\n}\n\n/* asynchronous API: crud methods */\n\nconst getItem = (key, storeName = _defaultStoreName) =>\n  crud.get(_db, key, storeName);\n\nconst getWhetherConditionItem = (condition, whether, storeName = _defaultStoreName) =>\n  crud.getWhetherCondition(_db, condition, whether, storeName);\n\nconst getAll = (storeName = _defaultStoreName) =>\n  crud.getAll(_db, storeName);\n\nconst addItem = (newData, storeName = _defaultStoreName) =>\n  crud.add(_db, newData, storeName);\n\nconst removeItem = (key, storeName = _defaultStoreName) =>\n  crud.remove(_db, key, storeName);\n\nconst removeWhetherConditionItem = (condition, whether, storeName = _defaultStoreName) =>\n  crud.removeWhetherCondition(_db, condition, whether, storeName);\n\nconst clear = (storeName = _defaultStoreName) =>\n  crud.clear(_db, storeName);\n\nconst updateItem = (newData, storeName = _defaultStoreName) =>\n  crud.update(_db, newData, storeName);\n\nexport default {\n  open,\n  getLength,\n  getNewKey,\n  getItem,\n  getWhetherConditionItem,\n  getAll,\n  addItem,\n  removeItem,\n  removeWhetherConditionItem,\n  clear,\n  updateItem,\n};\n"]}