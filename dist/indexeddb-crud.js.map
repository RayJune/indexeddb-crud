{"version":3,"sources":["../src/indexeddb-crud.js"],"names":["IndexedDBHandler","_db","_defaultStoreName","_presentKey","open","config","Promise","resolve","reject","window","indexedDB","_openHandler","fail","error","successCallback","openRequest","name","version","onblocked","alert","onupgradeneeded","target","result","success","_createObjectStoreHandler","storeConfig","onsuccess","onversionchange","close","_openSuccessCallbackHandler","onerror","console","log","Error","configStoreConfig","objectStoreList","_parseJSONData","forEach","index","storeName","length","_getPresentKey","transaction","_getAllRequest","cursor","value","id","continue","oncomplete","objectStoreNames","contains","_createObjectStore","store","createObjectStore","keyPath","key","autoIncrement","initialData","_initialDataHandler","objectStore","data","addRequest","add","rawdata","parsedData","JSON","parse","stringify","getLength","getNewKey","addItem","newData","successMessage","source","getItem","getRequest","get","parseInt","property","getWhetherConditionItem","condition","whether","push","getAll","removeItem","deleteRequest","delete","removeWhetherConditionItem","clear","updateItem","putRequest","put","openCursor","IDBKeyRange","lowerBound"],"mappings":"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","file":"indexeddb-crud.js","sourcesContent":["import log from './utlis/log';\nimport requestPromise from './utlis/requestPromise';\n\nconst IndexedDBHandler = (() => {\n  let _db;\n  let _defaultStoreName;\n  const _presentKey = {}; // store multi-objectStore's presentKey\n\n  function open(config) {\n    return new Promise((resolve, reject) => {\n    \n      if (window.indexedDB){\n        _openHandler(config, resolve);\n      } else {\n        log.fail('Your browser doesn\\'t support a stable version of IndexedDB. You can install latest Chrome or FireFox to handler it')\n        reject(error);\n      }\n    });\n  }\n\n  function _openHandler(config, successCallback) {\n    const openRequest = window.indexedDB.open(config.name, config.version); // open indexedDB\n\n    // an onblocked event is fired until they are closed or reloaded\n    openRequest.onblocked = () => {\n      // If some other tab is loaded with the database, then it needs to be closed before we can proceed.\n      window.alert('Please close all other tabs with this site open');\n    };\n\n    // Creating or updating the version of the database\n    openRequest.onupgradeneeded = ({ target }) => {\n      // All other databases have been closed. Set everything up.\n      _db = target.result;\n      log.success('onupgradeneeded in');\n      _createObjectStoreHandler(config.storeConfig);\n    };\n\n    openRequest.onsuccess = ({ target }) => {\n      _db = target.result;\n      _db.onversionchange = () => {\n        _db.close();\n        window.alert('A new version of this page is ready. Please reload');\n      };\n      _openSuccessCallbackHandler(config.storeConfig, successCallback);\n    };\n\n    // use error events bubble to handle all error events\n    openRequest.onerror = ({ target }) => {\n      window.alert('Something is wrong with indexedDB, for more information, checkout console');\n      console.log(target.error);\n      throw new Error(target.error);\n    };\n  }\n\n  function _openSuccessCallbackHandler(configStoreConfig, successCallback) {\n    const objectStoreList = _parseJSONData(configStoreConfig, 'storeName');\n\n    objectStoreList.forEach((storeConfig, index) => {\n      if (index === 0) {\n        _defaultStoreName = storeConfig.storeName; // PUNCHLINE: the last storeName is defaultStoreName\n      }\n      if (index === (objectStoreList.length - 1)) {\n        _getPresentKey(storeConfig.storeName, () => {\n          successCallback();\n          log.success('open indexedDB success');\n        });\n      } else {\n        _getPresentKey(storeConfig.storeName);\n      }\n    });\n  }\n\n  // set present key value to _presentKey (the private property)\n  function _getPresentKey(storeName, successCallback) {\n    const transaction = _db.transaction([storeName]);\n\n    _presentKey[storeName] = 0;\n    _getAllRequest(transaction, storeName).onsuccess = ({ target }) => {\n      const cursor = target.result;\n\n      if (cursor) {\n        _presentKey[storeName] = cursor.value.id;\n        cursor.continue();\n      }\n    };\n    transaction.oncomplete = () => {\n      log.success(`now ${storeName} 's max key is ${_presentKey[storeName]}`); // initial value is 0\n      if (successCallback) {\n        successCallback();\n        log.success('openSuccessCallback finished');\n      }\n    };\n  }\n\n  function _createObjectStoreHandler(configStoreConfig) {\n    _parseJSONData(configStoreConfig, 'storeName').forEach((storeConfig) => {\n      if (!(_db.objectStoreNames.contains(storeConfig.storeName))) {\n        _createObjectStore(storeConfig);\n      }\n    });\n  }\n\n  function _createObjectStore(storeConfig) {\n    const store = _db.createObjectStore(storeConfig.storeName, { keyPath: storeConfig.key, autoIncrement: true });\n\n    // Use transaction oncomplete to make sure the object Store creation is finished\n    store.transaction.oncomplete = () => {\n      log.success(`create ${storeConfig.storeName} 's object store succeed`);\n      if (storeConfig.initialData) {\n        // Store initial values in the newly created object store.\n        _initialDataHandler(storeConfig.storeName, storeConfig.initialData);\n      }\n    };\n  }\n\n  function _initialDataHandler(storeName, initialData) {\n    const transaction = _db.transaction([storeName], 'readwrite');\n    const objectStore = transaction.objectStore(storeName);\n\n    _parseJSONData(initialData, 'initial').forEach((data, index) => {\n      const addRequest = objectStore.add(data);\n\n      addRequest.onsuccess = () => {\n        log.success(`add initial data[${index}] successed`);\n      };\n    });\n    transaction.oncomplete = () => {\n      log.success(`add all ${storeName} 's initial data done`);\n      _getPresentKey(storeName);\n    };\n  }\n\n  function _parseJSONData(rawdata, name) {\n    try {\n      const parsedData = JSON.parse(JSON.stringify(rawdata));\n\n      return parsedData;\n    } catch (error) {\n      window.alert(`please set correct ${name} array object`);\n      console.log(error);\n      throw error;\n    }\n  }\n\n  function getLength(storeName = _defaultStoreName) {\n    return _presentKey[storeName];\n  }\n\n  function getNewKey(storeName = _defaultStoreName) {\n    _presentKey[storeName] += 1;\n\n    return _presentKey[storeName];\n  }\n\n  /* CRUD */\n\n  function addItem(newData, storeName = _defaultStoreName) {\n    const transaction = _db.transaction([storeName], 'readwrite');\n    const addRequest = transaction.objectStore(storeName).add(newData);\n    const successMessage = `add ${storeName}'s ${addRequest.source.keyPath}  = ${newData[addRequest.source.keyPath]} data succeed`;\n\n    return requestPromise(addRequest, successMessage, newData);\n  }\n\n  function getItem(key, storeName = _defaultStoreName) {\n    const transaction = _db.transaction([storeName]);\n    const getRequest = transaction.objectStore(storeName).get(parseInt(key, 10)); // get it by index\n    const successMessage = `get ${storeName}'s ${getRequest.source.keyPath} = ${key} data success`;\n    const data = { property: 'result'};\n\n    return requestPromise(getRequest, successMessage, data);\n  }\n\n  // get conditional data (boolean condition)\n  function getWhetherConditionItem(condition, whether, successCallback, storeName = _defaultStoreName) {\n    const transaction = _db.transaction([storeName]);\n    const result = []; // use an array to storage eligible data\n\n    _getAllRequest(transaction, storeName).onsuccess = ({ target }) => {\n      const cursor = target.result;\n\n      if (cursor) {\n        if (cursor.value[condition] === whether) {\n          result.push(cursor.value);\n        }\n        cursor.continue();\n      }\n    };\n    transaction.oncomplete = () => {\n      log.success(`get ${storeName}'s ${condition} = ${whether} data success`);\n      if (successCallback) {\n        successCallback(result);\n      }\n    };\n  }\n\n  function getAll(successCallback, storeName = _defaultStoreName) {\n    const transaction = _db.transaction([storeName]);\n    const result = [];\n\n    _getAllRequest(transaction, storeName).onsuccess = ({ target }) => {\n      const cursor = target.result;\n\n      if (cursor) {\n        result.push(cursor.value);\n        cursor.continue();\n      }\n    };\n    transaction.oncomplete = () => {\n      log.success(`get ${storeName}'s all data success`);\n      if (successCallback) {\n        successCallback(result);\n      }\n    };\n  }\n\n  function removeItem(key, successCallback, storeName = _defaultStoreName) {\n    const transaction = _db.transaction([storeName], 'readwrite');\n    const deleteRequest = transaction.objectStore(storeName).delete(key);\n    const successMessage = `remove ${storeName}'s  ${deleteRequest.source.keyPath} = ${key} data success`;\n\n    return requestPromise(deleteRequest, successMessage, key);\n  }\n\n  function removeWhetherConditionItem(condition, whether, successCallback, storeName = _defaultStoreName) {\n    const transaction = _db.transaction([storeName], 'readwrite');\n\n    _getAllRequest(transaction, storeName).onsuccess = ({ target }) => {\n      const cursor = target.result;\n\n      if (cursor) {\n        if (cursor.value[condition] === whether) {\n          cursor.delete();\n        }\n        cursor.continue();\n      }\n    };\n    transaction.oncomplete = () => {\n      log.success(`remove ${storeName}'s ${condition} = ${whether} data success`);\n      if (successCallback) {\n        successCallback();\n      }\n    };\n  }\n\n  function clear(successCallback, storeName = _defaultStoreName) {\n    const transaction = _db.transaction([storeName], 'readwrite');\n\n    _getAllRequest(transaction, storeName).onsuccess = ({ target }) => {\n      const cursor = target.result;\n\n      if (cursor) {\n        cursor.delete();\n        cursor.continue();\n      }\n    };\n    transaction.oncomplete = () => {\n      log.success(`clear ${storeName}'s all data success`);\n      if (successCallback) {\n        successCallback('clear all data success');\n      }\n    };\n  }\n\n  // update one\n  function updateItem(newData, successCallback, storeName = _defaultStoreName) {\n    const transaction = _db.transaction([storeName], 'readwrite');\n    const putRequest = transaction.objectStore(storeName).put(newData);\n    const successMessage = `update ${storeName}'s ${putRequest.source.keyPath}  = ${newData[putRequest.source.keyPath]} data success`;\n    \n    return requestPromise(putRequest, successMessage, newData);\n  }\n\n  function _getAllRequest(transaction, storeName) {\n    return transaction.objectStore(storeName).openCursor(IDBKeyRange.lowerBound(1), 'next');\n  }\n\n  return {\n    open,\n    getLength,\n    getNewKey,\n    getItem,\n    getWhetherConditionItem,\n    getAll,\n    addItem,\n    removeItem,\n    removeWhetherConditionItem,\n    clear,\n    updateItem,\n  };\n})();\n\nexport default IndexedDBHandler;\n"]}