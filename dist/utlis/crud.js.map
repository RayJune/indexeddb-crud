{"version":3,"sources":["../../src/utlis/crud.js"],"names":["get","dbValue","key","storeName","transaction","getRequest","objectStore","parseInt","successMessage","source","keyPath","data","property","getWhetherCondition","condition","whether","successCallback","result","onsuccess","target","cursor","value","push","continue","oncomplete","success","getAll","add","newData","addRequest","remove","deleteRequest","delete","removeWhetherCondition","clear","update","putRequest","put","crud"],"mappings":"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","file":"crud.js","sourcesContent":["import log from './log';\nimport requestPromise from './requestPromise';\nimport getAllRequest from './getAllRequest';\n\nfunction get(dbValue, key, storeName) {\n  const transaction = dbValue.transaction([storeName]);\n  const getRequest = transaction.objectStore(storeName).get(parseInt(key, 10)); // get it by index\n  const successMessage = `get ${storeName}'s ${getRequest.source.keyPath} = ${key} data success`;\n  const data = { property: 'result' };\n\n  return requestPromise(getRequest, successMessage, data);\n}\n\n// get conditional data (boolean condition)\nfunction getWhetherCondition(dbValue, condition, whether, successCallback, storeName) {\n  const transaction = dbValue.transaction([storeName]);\n  const result = []; // use an array to storage eligible data\n\n  getAllRequest(transaction, storeName).onsuccess = ({ target }) => {\n    const cursor = target.result;\n\n    if (cursor) {\n      if (cursor.value[condition] === whether) {\n        result.push(cursor.value);\n      }\n      cursor.continue();\n    }\n  };\n  transaction.oncomplete = () => {\n    log.success(`get ${storeName}'s ${condition} = ${whether} data success`);\n    if (successCallback) {\n      successCallback(result);\n    }\n  };\n}\n\nfunction getAll(dbValue, successCallback, storeName) {\n  const transaction = dbValue.transaction([storeName]);\n  const result = [];\n\n  getAllRequest(transaction, storeName).onsuccess = ({ target }) => {\n    const cursor = target.result;\n\n    if (cursor) {\n      result.push(cursor.value);\n      cursor.continue();\n    }\n  };\n  transaction.oncomplete = () => {\n    log.success(`get ${storeName}'s all data success`);\n    if (successCallback) {\n      successCallback(result);\n    }\n  };\n}\n\nfunction add(dbValue, newData, storeName) {\n  const transaction = dbValue.transaction([storeName], 'readwrite');\n  const addRequest = transaction.objectStore(storeName).add(newData);\n  const successMessage = `add ${storeName}'s ${addRequest.source.keyPath}  = ${newData[addRequest.source.keyPath]} data succeed`;\n\n  return requestPromise(addRequest, successMessage, newData);\n}\n\nfunction remove(dbValue, key, storeName) {\n  const transaction = dbValue.transaction([storeName], 'readwrite');\n  const deleteRequest = transaction.objectStore(storeName).delete(key);\n  const successMessage = `remove ${storeName}'s  ${deleteRequest.source.keyPath} = ${key} data success`;\n\n  return requestPromise(deleteRequest, successMessage, key);\n}\n\nfunction removeWhetherCondition(dbValue, condition, whether, successCallback, storeName) {\n  const transaction = dbValue.transaction([storeName], 'readwrite');\n\n  getAllRequest(transaction, storeName).onsuccess = ({ target }) => {\n    const cursor = target.result;\n\n    if (cursor) {\n      if (cursor.value[condition] === whether) {\n        cursor.delete();\n      }\n      cursor.continue();\n    }\n  };\n  transaction.oncomplete = () => {\n    log.success(`remove ${storeName}'s ${condition} = ${whether} data success`);\n    if (successCallback) {\n      successCallback();\n    }\n  };\n}\n\nfunction clear(dbValue, successCallback, storeName) {\n  const transaction = dbValue.transaction([storeName], 'readwrite');\n\n  getAllRequest(transaction, storeName).onsuccess = ({ target }) => {\n    const cursor = target.result;\n\n    if (cursor) {\n      cursor.delete();\n      cursor.continue();\n    }\n  };\n  transaction.oncomplete = () => {\n    log.success(`clear ${storeName}'s all data success`);\n    if (successCallback) {\n      successCallback('clear all data success');\n    }\n  };\n}\n\n// update one\nfunction update(dbValue, newData, storeName) {\n  const transaction = dbValue.transaction([storeName], 'readwrite');\n  const putRequest = transaction.objectStore(storeName).put(newData);\n  const successMessage = `update ${storeName}'s ${putRequest.source.keyPath}  = ${newData[putRequest.source.keyPath]} data success`;\n\n  return requestPromise(putRequest, successMessage, newData);\n}\n\nconst crud = {\n  get,\n  getWhetherCondition,\n  getAll,\n  add,\n  remove,\n  removeWhetherCondition,\n  clear,\n  update,\n};\n\nexport default crud;\n"]}