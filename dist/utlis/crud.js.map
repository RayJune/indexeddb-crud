{"version":3,"sources":["../../src/utlis/crud.js"],"names":["get","dbValue","key","storeName","transaction","getRequest","objectStore","parseInt","successMessage","source","keyPath","data","property","request","getWhetherCondition","condition","whether","result","onsuccess","target","cursor","value","push","continue","getAll","add","newData","addRequest","remove","deleteRequest","delete","removeWhetherCondition","clear","update","putRequest","put"],"mappings":"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","file":"crud.js","sourcesContent":["import promiseGenerator from './promiseGenerator';\nimport getAllRequest from './getAllRequest';\n\nfunction get(dbValue, key, storeName) {\n  const transaction = dbValue.transaction([storeName]);\n  const getRequest = transaction.objectStore(storeName).get(parseInt(key, 10)); // get it by index\n  const successMessage = `get ${storeName}'s ${getRequest.source.keyPath} = ${key} data success`;\n  const data = { property: 'result' };\n\n  return promiseGenerator.request(getRequest, successMessage, data);\n}\n\n// get conditional data (boolean condition)\nfunction getWhetherCondition(dbValue, condition, whether, storeName) {\n  const transaction = dbValue.transaction([storeName]);\n  const result = []; // use an array to storage eligible data\n  const successMessage = `get ${storeName}'s ${condition} = ${whether} data success`;\n\n  getAllRequest(transaction, storeName).onsuccess = ({ target }) => {\n    const cursor = target.result;\n\n    if (cursor) {\n      if (cursor.value[condition] === whether) {\n        result.push(cursor.value);\n      }\n      cursor.continue();\n    }\n  };\n\n  return promiseGenerator.transaction(transaction, successMessage, result);\n}\n\nfunction getAll(dbValue, storeName) {\n  const transaction = dbValue.transaction([storeName]);\n  const result = [];\n  const successMessage = `get ${storeName}'s all data success`;\n\n  getAllRequest(transaction, storeName).onsuccess = ({ target }) => {\n    const cursor = target.result;\n\n    if (cursor) {\n      result.push(cursor.value);\n      cursor.continue();\n    }\n  };\n\n  return promiseGenerator.transaction(transaction, successMessage, result);\n}\n\nfunction add(dbValue, newData, storeName) {\n  const transaction = dbValue.transaction([storeName], 'readwrite');\n  const addRequest = transaction.objectStore(storeName).add(newData);\n  const successMessage = `add ${storeName}'s ${addRequest.source.keyPath}  = ${newData[addRequest.source.keyPath]} data succeed`;\n\n  return promiseGenerator.request(addRequest, successMessage, newData);\n}\n\nfunction remove(dbValue, key, storeName) {\n  const transaction = dbValue.transaction([storeName], 'readwrite');\n  const deleteRequest = transaction.objectStore(storeName).delete(key);\n  const successMessage = `remove ${storeName}'s  ${deleteRequest.source.keyPath} = ${key} data success`;\n\n  return promiseGenerator.request(deleteRequest, successMessage, key);\n}\n\nfunction removeWhetherCondition(dbValue, condition, whether, storeName) {\n  const transaction = dbValue.transaction([storeName], 'readwrite');\n  const successMessage = `remove ${storeName}'s ${condition} = ${whether} data success`;\n\n  getAllRequest(transaction, storeName).onsuccess = ({ target }) => {\n    const cursor = target.result;\n\n    if (cursor) {\n      if (cursor.value[condition] === whether) {\n        cursor.delete();\n      }\n      cursor.continue();\n    }\n  };\n\n  return promiseGenerator.transaction(transaction, successMessage);\n}\n\nfunction clear(dbValue, storeName) {\n  const transaction = dbValue.transaction([storeName], 'readwrite');\n  const successMessage = `clear ${storeName}'s all data success`;\n\n  getAllRequest(transaction, storeName).onsuccess = ({ target }) => {\n    const cursor = target.result;\n\n    if (cursor) {\n      cursor.delete();\n      cursor.continue();\n    }\n  };\n\n  return promiseGenerator.transaction(transaction, successMessage);\n}\n\n// update one\nfunction update(dbValue, newData, storeName) {\n  const transaction = dbValue.transaction([storeName], 'readwrite');\n  const putRequest = transaction.objectStore(storeName).put(newData);\n  const successMessage = `update ${storeName}'s ${putRequest.source.keyPath}  = ${newData[putRequest.source.keyPath]} data success`;\n\n  return promiseGenerator.request(putRequest, successMessage, newData);\n}\n\nexport default {\n  get,\n  getWhetherCondition,\n  getAll,\n  add,\n  remove,\n  removeWhetherCondition,\n  clear,\n  update,\n};\n"]}