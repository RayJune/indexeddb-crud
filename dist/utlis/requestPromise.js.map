{"version":3,"sources":["../../src/utlis/requestPromise.js"],"names":["requestPromise","request","successMessage","data","Promise","resolve","reject","onsuccess","successData","property","success","onerror","fail","error"],"mappings":";;;;;;AAAA;;;;;;AAEA,IAAMA,iBAAiB,SAAjBA,cAAiB,CAACC,OAAD,EAAUC,cAAV,EAA0BC,IAA1B;AAAA,SAAmC,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACzFL,YAAQM,SAAR,GAAoB,YAAM;AACxB,UAAIC,cAAcL,IAAlB;;AAEA,UAAIA,KAAKM,QAAT,EAAmB;AACjBD,sBAAcP,QAAQE,KAAKM,QAAb,CAAd,CADiB,CACqB;AACvC;AACD,oBAAIC,OAAJ,CAAYR,cAAZ;AACAG,cAAQG,WAAR;AACD,KARD;AASAP,YAAQU,OAAR,GAAkB,YAAM;AACtB,oBAAIC,IAAJ,CAASX,QAAQY,KAAjB;AACAP;AACD,KAHD;AAID,GAdyD,CAAnC;AAAA,CAAvB;;kBAgBeN,c","file":"requestPromise.js","sourcesContent":["import log from './log';\n\nconst requestPromise = (request, successMessage, data) => new Promise((resolve, reject) => {\n  request.onsuccess = () => {\n    let successData = data;\n\n    if (data.property) {\n      successData = request[data.property]; // for getItem\n    }\n    log.success(successMessage);\n    resolve(successData);\n  };\n  request.onerror = () => {\n    log.fail(request.error);\n    reject();\n  };\n});\n\nexport default requestPromise;\n"]}